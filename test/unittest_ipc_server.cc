#include "internal.h"
#define SERVER_NAME "unittest_serv"
#define MAX_CLIENT_COUNT 5
static uint32_t client_count = 0;
static uint32_t verification_count[5] = {0};

static char test_string0[] = "Hello Word";
static char test_string1[] = "AaBbCcDd";
static char test_string2[] = "";
static char test_string3[] = "1";
static char test_string4[] = \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789";

static char response_string0[] = "Dlrow olleh";
static char response_string1[] = "dDcCbCaA";
static char response_string2[] = "";
static char response_string3[] = "2";
static char response_string4[] = \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789" \
"012345678901234567890123456789012345678901234567890123456789";

int32_t serv_on_disconnected(cplus_socket conn_sock)
{
	client_count -= 1;
	return CPLUS_SUCCESS;
}

int32_t serv_on_connected(cplus_socket conn_sock)
{
	client_count += 1;
	return CPLUS_SUCCESS;
}

int32_t serv_request_on_received(
	cplus_socket conn_sock
	, uint32_t input_bufs_len
	, void * input_bufs
	, uint32_t * output_bufs_len
	, void * output_bufs)
{
	if (((strlen(test_string0) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string0)))
	{
		cplus_mem_cpy_ex(
			output_bufs
			, (*output_bufs_len)
			, response_string0
			, strlen(response_string0) + 1);
		if ((* output_bufs_len) >= (strlen(response_string0) + 1))
		{
			verification_count[0] += 1;
		}
		(*output_bufs_len) = strlen(response_string0) + 1;
	}
	else if (((strlen(test_string1) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string1)))
	{
		cplus_mem_cpy_ex(
			output_bufs
			, (*output_bufs_len)
			, response_string1
			, strlen(response_string1) + 1);
		if ((* output_bufs_len) >= (strlen(response_string1) + 1))
		{
			verification_count[1] += 1;
		}
		(*output_bufs_len) = strlen(response_string1) + 1;
	}
	else if (((strlen(test_string2) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string2)))
	{
		cplus_mem_cpy_ex(
			output_bufs
			, (*output_bufs_len)
			, response_string2
			, strlen(response_string2) + 1);
		if ((* output_bufs_len) >= (strlen(response_string2) + 1))
		{
			verification_count[2] += 1;
		}
		(*output_bufs_len) = strlen(response_string2) + 1;
	}
	else if (((strlen(test_string3) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string3)))
	{
		cplus_mem_cpy_ex(
			output_bufs
			, (*output_bufs_len)
			, response_string3
			, strlen(response_string3) + 1);
		if ((* output_bufs_len) >= (strlen(response_string3) + 1))
		{
			verification_count[3] += 1;
		}
		(*output_bufs_len) = strlen(response_string3) + 1;
	}
	else if (((strlen(test_string4) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string4)))
	{
		cplus_mem_cpy_ex(
			output_bufs
			, (*output_bufs_len)
			, response_string4
			, strlen(response_string4) + 1);
		if ((* output_bufs_len) >= (strlen(response_string4) + 1))
		{
			verification_count[4] += 1;
		}
		(* output_bufs_len) = strlen(response_string4) + 1;
	}
	return CPLUS_SUCCESS;
}

TEST(CPLUS_IPC_CLIENT_SEND_REQUEST, functionity)
{
	client_count = 0;
	for (uint32_t i = 0; i < sizeof(verification_count)/sizeof(uint32_t); i++)
	{
		verification_count[i] = 0;
	}

	cplus_ipc_server ipc_server = CPLUS_NULL;
	cplus_ipc_client client[MAX_CLIENT_COUNT] = {0};

	char recv_bufs[65536] = {0};
	uint32_t recv_bufs_size = sizeof(recv_bufs);
	int32_t recv_count = 0;

	CPLUS_IPC_CB_FUNCS_T ipc_server_cb_funcs = {0};
	ipc_server_cb_funcs.on_connected = serv_on_connected;
	ipc_server_cb_funcs.on_received = serv_request_on_received;
	ipc_server_cb_funcs.on_disconnected = serv_on_disconnected;

	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_server = cplus_ipc_server_new(SERVER_NAME, MAX_CLIENT_COUNT, &ipc_server_cb_funcs))));
	for (int32_t idx = 0; idx < MAX_CLIENT_COUNT; idx++)
	{
		EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (client[idx] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
		EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				client[idx]
				, strlen(test_string0) + 1
				, test_string0
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 10000))));
		EXPECT_EQ(strlen(response_string0) + 1, recv_count);
		EXPECT_EQ(0, strcmp(recv_bufs, response_string0));
		EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				client[idx]
				, strlen(test_string1) + 1
				, test_string1
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 10000))));
		EXPECT_EQ(strlen(response_string1) + 1, recv_count);
		EXPECT_EQ(0, strcmp(recv_bufs, response_string1));
		EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				client[idx]
				, strlen(test_string2) + 1
				, test_string2
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 10000))));
		EXPECT_EQ(strlen(response_string2) + 1, recv_count);
		EXPECT_EQ(0, strcmp(recv_bufs, response_string2));
		EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				client[idx]
				, strlen(test_string3) + 1
				, test_string3
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 10000))));
		EXPECT_EQ(strlen(response_string3) + 1, recv_count);
		EXPECT_EQ(0, strcmp(recv_bufs, response_string3));
		EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				client[idx]
				, strlen(test_string4) + 1
				, test_string4
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 10000*60))));
		EXPECT_EQ(strlen(response_string4) + 1, recv_count);
		EXPECT_EQ(0, strcmp(recv_bufs, response_string4));
	}
	cplus_systime_sleep_msec(5 * 1000);
	EXPECT_EQ(MAX_CLIENT_COUNT, client_count);
	for (int32_t idx = 0; idx < MAX_CLIENT_COUNT; idx++)
	{
		EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[idx]));
	}
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_server_delete(ipc_server));
	EXPECT_EQ(0, client_count);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[0]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[1]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[2]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[3]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[4]);
	EXPECT_EQ(0, cplus_mgr_report());
}

int32_t serv_oneway_on_received(
	cplus_socket conn_sock
	, uint32_t input_bufs_len
	, void * input_bufs
	, uint32_t * output_bufs_len
	, void * output_bufs)
{
	if (((strlen(test_string0) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string0)))
	{
		verification_count[0] += 1;
	}
	else if (((strlen(test_string1) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string1)))
	{
		verification_count[1] += 1;
	}
	else if (((strlen(test_string2) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string2)))
	{
		verification_count[2] += 1;
	}
	else if (((strlen(test_string3) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string3)))
	{
		verification_count[3] += 1;
	}
	else if (((strlen(test_string4) + 1) == input_bufs_len)
		&& (0 == strcmp((const char *)(input_bufs), test_string4)))
	{
		verification_count[4] += 1;
	}
	return CPLUS_SUCCESS;
}

TEST(CPLUS_IPC_CLIENT_SEND_ONEWAY, functionity)
{
	client_count = 0;
	for (uint32_t i = 0; i < sizeof(verification_count)/sizeof(uint32_t); i++)
	{
		verification_count[i] = 0;
	}

	cplus_ipc_server ipc_server = CPLUS_NULL;
	cplus_ipc_client client[MAX_CLIENT_COUNT] = {0};

	CPLUS_IPC_CB_FUNCS_T ipc_server_cb_funcs = {0};
	ipc_server_cb_funcs.on_connected = serv_on_connected;
	ipc_server_cb_funcs.on_received = serv_oneway_on_received;
	ipc_server_cb_funcs.on_disconnected = serv_on_disconnected;

	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_server = cplus_ipc_server_new(SERVER_NAME, MAX_CLIENT_COUNT, &ipc_server_cb_funcs))));
	for (int32_t idx = 0; idx < MAX_CLIENT_COUNT; idx++)
	{
		EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (client[idx] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
		EXPECT_EQ(strlen(test_string0) + 1, cplus_ipc_client_send_oneway(client[idx], strlen(test_string0) + 1, test_string0));
		EXPECT_EQ(strlen(test_string1) + 1, cplus_ipc_client_send_oneway(client[idx], strlen(test_string1) + 1, test_string1));
		EXPECT_EQ(strlen(test_string2) + 1, cplus_ipc_client_send_oneway(client[idx], strlen(test_string2) + 1, test_string2));
		EXPECT_EQ(strlen(test_string3) + 1, cplus_ipc_client_send_oneway(client[idx], strlen(test_string3) + 1, test_string3));
		EXPECT_EQ(strlen(test_string4) + 1, cplus_ipc_client_send_oneway(client[idx], strlen(test_string4) + 1, test_string4));
	}
	cplus_systime_sleep_msec(5 * 1000);
	EXPECT_EQ(MAX_CLIENT_COUNT, client_count);
	for (int32_t idx = 0; idx < MAX_CLIENT_COUNT; idx++)
	{
		EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[idx]));
	}
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_server_delete(ipc_server));
	EXPECT_EQ(0, client_count);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[0]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[1]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[2]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[3]);
	EXPECT_EQ(MAX_CLIENT_COUNT, verification_count[4]);
	EXPECT_EQ(0, cplus_mgr_report());
}

TEST(CPLUS_IPC_CLIENT_CONNECT, bad_case_over_connection_count)
{
	cplus_ipc_server ipc_server = CPLUS_NULL;
	cplus_ipc_client client[MAX_CLIENT_COUNT + 1] = {0};

	CPLUS_IPC_CB_FUNCS_T ipc_server_cb_funcs = {0};
	ipc_server_cb_funcs.on_connected = serv_on_connected;
	ipc_server_cb_funcs.on_received = serv_oneway_on_received;
	ipc_server_cb_funcs.on_disconnected = serv_on_disconnected;

	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_server = cplus_ipc_server_new(SERVER_NAME, MAX_CLIENT_COUNT, &ipc_server_cb_funcs))));
	for (int32_t i = 0; i < MAX_CLIENT_COUNT; i++)
	{
		EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (client[i] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	}
	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL == (client[5] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[0]));
	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (client[5] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_send_heartbeat(client[5], 3000));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_send_heartbeat(client[5], 3000));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[2]));
	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (client[2] = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_send_heartbeat(client[2], 3000));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[1]));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[2]));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[3]));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[4]));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(client[5]));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_server_delete(ipc_server));
	EXPECT_EQ(0, cplus_mgr_report());
}

TEST(CPLUS_IPC_CLIENT_SEND_REQUEST, bad_case_timeout)
{
	cplus_ipc_server ipc_server = CPLUS_NULL;
	cplus_ipc_client ipc_client = CPLUS_NULL;

	char recv_bufs[512] = {0};
	uint32_t recv_bufs_size = sizeof(recv_bufs);
	int32_t recv_count = 0;

	CPLUS_IPC_CB_FUNCS_T ipc_server_cb_funcs = {0};
	ipc_server_cb_funcs.on_connected = serv_on_connected;
	ipc_server_cb_funcs.on_received = serv_request_on_received;
	ipc_server_cb_funcs.on_disconnected = serv_on_disconnected;

	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_server = cplus_ipc_server_new(SERVER_NAME, MAX_CLIENT_COUNT, &ipc_server_cb_funcs))));
	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_client = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				ipc_client
				, strlen(test_string0) + 1
				, test_string0
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 1000))));
	EXPECT_EQ(strlen(response_string0) + 1, recv_count);
	EXPECT_EQ(0, strcmp(recv_bufs, response_string0));
	EXPECT_NE(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				ipc_client
				, strlen(test_string1) + 1
				, test_string1
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 1))));
	EXPECT_EQ(ETIMEDOUT, errno);
	EXPECT_EQ(CPLUS_TRUE
			, (0 < (recv_count = cplus_ipc_client_send_request(
				ipc_client
				, strlen(test_string2) + 1
				, test_string2
				, recv_bufs_size
				, (void *)(recv_bufs)
				, 1000))));
	EXPECT_EQ(strlen(response_string2) + 1, recv_count);
	EXPECT_EQ(0, strcmp(recv_bufs, response_string2));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(ipc_client));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_server_delete(ipc_server));
	EXPECT_EQ(0, cplus_mgr_report());
}

TEST(CPLUS_IPC_CLIENT_SEND_HEARTBEAT, bad_case_timeout)
{
	cplus_ipc_server ipc_server = CPLUS_NULL;
	cplus_ipc_client ipc_client = CPLUS_NULL;

	CPLUS_IPC_CB_FUNCS_T ipc_server_cb_funcs = {0};
	ipc_server_cb_funcs.on_connected = serv_on_connected;
	ipc_server_cb_funcs.on_received = serv_oneway_on_received;
	ipc_server_cb_funcs.on_disconnected = serv_on_disconnected;

	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_server = cplus_ipc_server_new(SERVER_NAME, MAX_CLIENT_COUNT, &ipc_server_cb_funcs))));
	EXPECT_EQ(CPLUS_TRUE, (CPLUS_NULL != (ipc_client = cplus_ipc_client_new(SERVER_NAME, CPLUS_NULL))));
	EXPECT_EQ(CPLUS_FAIL, cplus_ipc_client_send_heartbeat(ipc_client, 1));
	EXPECT_EQ(ETIMEDOUT, errno);
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_client_delete(ipc_client));
	EXPECT_EQ(CPLUS_SUCCESS, cplus_ipc_server_delete(ipc_server));
	EXPECT_EQ(0, cplus_mgr_report());
}